{"ast":null,"code":"var _jsxFileName = \"/home/drew/MATC/amplify-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\n// Import useState and useEffect hooks from React\nimport React, { useState, useEffect } from 'react';\n\n// Import the API category from AWS Amplify\nimport { API } from 'aws-amplify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Create coins variable and set to empty array\n  const [coins, updateCoins] = useState([]);\n\n  // Create additional state to hold user input for limit and start properties\n  const [input, updateInput] = useState({\n    limit: 5,\n    start: 0\n  });\n\n  // Create a new function to allow users to update the input values\n  function updateInputValues(type, value) {\n    updateInput({\n      ...input,\n      [type]: value\n    });\n  }\n  ;\n\n  // Define function to all API\n  const fetchCoins = async () => {\n    const {\n      limit,\n      start\n    } = input;\n    const data = await API.get('cryptoapi', `/coins?limit=${limit}&start=${start}`);\n    updateCoins(data.coins);\n  };\n\n  // Call fetchCoins function when component loads\n  useEffect(() => {\n    fetchCoins();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: coins.map((coin, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [coin.name, \" - \", coin.symbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"$\", coin.price_usd]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"GxCqLZ23jvcSFNQNZphijv+c6Ig=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","API","jsxDEV","_jsxDEV","App","_s","coins","updateCoins","input","updateInput","limit","start","updateInputValues","type","value","fetchCoins","data","get","className","children","map","coin","index","name","symbol","fileName","_jsxFileName","lineNumber","columnNumber","price_usd","_c","$RefreshReg$"],"sources":["/home/drew/MATC/amplify-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n// Import useState and useEffect hooks from React\nimport React, { useState, useEffect } from 'react';\n\n// Import the API category from AWS Amplify\nimport { API } from 'aws-amplify';\n\nconst App = () => {\n  // Create coins variable and set to empty array\n  const [coins, updateCoins] = useState([]);\n\n  // Create additional state to hold user input for limit and start properties\n  const [input, updateInput] = useState({ limit: 5, start: 0 });\n\n  // Create a new function to allow users to update the input values\n  function updateInputValues(type, value) {\n    updateInput({ ...input, [type]: value })\n  };\n\n  // Define function to all API\n  const fetchCoins= async() => {\n    const { limit, start } = input;\n    const data = await API.get('cryptoapi', `/coins?limit=${limit}&start=${start}`);\n    updateCoins(data.coins)\n  }\n\n\n  // Call fetchCoins function when component loads\n  useEffect(() => {\n    fetchCoins()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {\n        coins.map((coin, index) => (\n          <div key={index}>\n            <h2>{coin.name} - {coin.symbol}</h2>\n            <h5>${coin.price_usd}</h5>\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB;AACA,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AACA,SAASC,GAAG,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,KAAK,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEzC;EACA,MAAM,CAACS,KAAK,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC;IAAEW,KAAK,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC;;EAE7D;EACA,SAASC,iBAAiBA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACtCL,WAAW,CAAC;MAAE,GAAGD,KAAK;MAAE,CAACK,IAAI,GAAGC;IAAM,CAAC,CAAC;EAC1C;EAAC;;EAED;EACA,MAAMC,UAAU,GAAE,MAAAA,CAAA,KAAW;IAC3B,MAAM;MAAEL,KAAK;MAAEC;IAAM,CAAC,GAAGH,KAAK;IAC9B,MAAMQ,IAAI,GAAG,MAAMf,GAAG,CAACgB,GAAG,CAAC,WAAW,EAAG,gBAAeP,KAAM,UAASC,KAAM,EAAC,CAAC;IAC/EJ,WAAW,CAACS,IAAI,CAACV,KAAK,CAAC;EACzB,CAAC;;EAGD;EACAN,SAAS,CAAC,MAAM;IACde,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,EAEhBb,KAAK,CAACc,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpBnB,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,GAAKE,IAAI,CAACE,IAAI,EAAC,KAAG,EAACF,IAAI,CAACG,MAAM;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACpCzB,OAAA;QAAAgB,QAAA,GAAI,GAAC,EAACE,IAAI,CAACQ,SAAS;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM;IAAA,GAFlBN,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAIhB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEA;AAEV,CAAC;AAAAvB,EAAA,CArCKD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAuCT,eAAeA,GAAG;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}